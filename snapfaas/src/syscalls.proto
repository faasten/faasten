syntax = "proto3";

package snapfaas.syscalls;

message Function {
  uint64 memory = 1;
  uint64 appImage = 2; // Blob fd
  uint64 runtime = 3; // Blob fd
  uint64 kernel = 4;  // Blob fd
}

message TokenList {
  repeated string tokens = 1;
}

message Clause {
  // A disjuction of principals
  repeated TokenList principals = 1;
}

message ClauseList {
  repeated Clause clauses = 1;
}

message Component {
  oneof component {
    Void DCFalse = 1;
    // A conjunction of clauses
    ClauseList clauses = 2;
  }
}

message Buckle {
  // None means DcFalse, empty clauses means DcTrue, otherwise DcFormula
  Component secrecy = 1;
  // None means DcFalse, empty clauses means DcTrue, otherwise DcFormula
  Component integrity = 2;
}

message Void {}

message Request {
  bytes payload = 1;
  map <string, uint64> blobs = 2;
  map <string, string> headers = 3;
}

message Response {
  bytes payload = 1;
}

message DentResult {
  bool success = 1;
  optional uint64 fd = 2;
  optional bytes data = 3;
}

message DentInvokeResult {
  bool success = 1;
  optional uint64 fd = 2;
  optional bytes data = 3;
  map <string, bytes> headers = 4;
  uint32 status = 5;
}

message DentOpenResult {
  bool success = 1;
  uint64 fd = 2;
  DentKind kind = 3;
}

message BlobCreate {
  optional uint64 size = 1;
}

message BlobWrite {
  uint64 fd = 1;
  bytes data = 2;
}

message BlobFinalize {
  uint64 fd = 1;
}

message BlobRead {
  uint64 fd = 1;
  optional uint64 offset = 2;
  optional uint64 length = 3;
}

message BlobClose {
  uint64 fd = 1;
}

message DentOpen {
  uint64  fd = 1;
  oneof entry {
    string name = 2;
    Buckle facet = 3;
  }
}

message DentLink {
  uint64  dir_fd = 1;
  string  name = 2;
  uint64  target_fd = 3;
}



message DentCreate {
  Buckle   label = 1;
  oneof kind {
    Void    directory        = 2;
    Void    file             = 3;
    Void    facetedDirectory = 4;
    Gate    gate             = 5;
    Service service          = 6;
    uint64  blob             = 7;
  }
}

message DentUpdate {
  uint64 fd = 1;
  oneof kind {
    //Void    directory        = 2;
    bytes     file             = 3;
    //Void    facetedDirectory = 4;
    Gate    gate             = 5;
    Service service          = 6;
    uint64  blob             = 7;
  }
}

enum DentKind {
  DentDirectory = 0;
  DentFile = 1;
  DentFacetedDirectory = 2;
  DentGate = 3;
  DentService = 4;
  DentBlob = 5;
}

// Protocol buffers doesn't have type aliasing, but:
// type Directory = map <string, DentKind>
// type File = bytes

message Gate {
  oneof kind {
    DirectGate direct = 1;
    RedirectGate redirect = 2;
  }
}

message DirectGate {
    Component privilege = 1;
    Component invoker_integrity_clearance = 2;
    Function  function = 3;
    Component declassify = 4;
}

message RedirectGate {
    Component privilege = 1;
    Component invoker_integrity_clearance = 2;
    uint64    gate = 3;
    Component declassify = 4;
}

enum HttpVerb {
  HttpHead = 0;
  HttpGet = 1;
  HttpPost = 2;
  HttpPut = 3;
  HttpDelete = 4;
}

message Service {
    Component            privilege = 1;
    Component            invoker_integrity_clearance = 2;
    Buckle               taint = 3;
    string               url = 4;
    HttpVerb             verb = 5;
    map <string, string> headers = 6;
}

message DentListResult {
  bool success = 1;
  map <string, DentKind> entries = 2;
}

message DentLsFacetedResult {
  bool success = 1;
  repeated Buckle facets = 2;
}

message DentLsGateResult {
  bool success = 1;
  Gate gate = 2;
}

message DentLsFaceted {
  uint64 fd = 1;
  Buckle clearance = 2;
}

message DentUnlink {
  uint64  fd = 1;
  string name = 2;
}

message DentInvoke {
  uint64               fd         = 1;
  bool                 sync       = 2;
  bytes                payload    = 3;
  bool                 toblob     = 4;
  map <string, string> parameters = 5;
}

message BlobResult {
  bool success = 1;
  uint64 fd = 2;
  uint64 len = 3;
  optional bytes data = 4;
}

message MaybeBuckle {
  Buckle label = 1;
}

message Syscall {
  oneof syscall {
    // Send function response. Marks completion of the function, doesn't return a value
    Response response = 1;

    string buckleParse = 2; // returns MaybeBuckle
    Void getCurrentLabel = 3; // returns Buckle
    Buckle taintWithLabel = 4; // rerturns Buckle (new current label)
    Component declassify = 5; // returns Buckle (new current label)
    TokenList subPrivilege = 6;

    Void              root           = 99; // returns DentResult

    DentOpen          dentOpen       =  7; // returns DentOpenResult
    uint64            dentClose      =  8; // returns DentResult
    DentCreate        dentCreate     =  9; // returns DentResult
    DentUpdate        dentUpdate     = 10; // returns DentResult
    uint64            dentRead       = 11; // returns DentResult
    uint64            dentList       = 12; // returns DentListResult
    DentLsFaceted     dentLsFaceted  = 13; // returns DentLsFacetedResult
    DentLink          dentLink       = 14; // returns DentResult
    DentUnlink        dentUnlink     = 15; // returns DentResult
    DentInvoke        dentInvoke     = 16; // returns DentInvokeResult
    uint64            dentLsGate     = 17; // returns DentLsGateResult
    uint64            dentGetBlob    = 18; // returns BlobResult

    BlobCreate        blobCreate     = 100; // returns BlobResult
    BlobWrite         blobWrite      = 101; // returns BlobResult
    BlobFinalize      blobFinalize   = 102; // returns BlobResult
    BlobRead          blobRead       = 103;  // returns BlobResult
    BlobClose         blobClose      = 104; // returns BlobResult
  }
}
